## Диаграмма рассеяния
# import seaborn
# seaborn.barplot(x=..., y=...)

# Подобно тепловой карте, диаграмма рассеяния позволяет выявить
# аномальные и наиболее типичные значения датасета.
# Но если хитмэп «подсвечивает» изменения значений только одной
# переменной — например, количества поломок — то диаграмма
# рассеяния отражает значения сразу двух, позволяя выявить
# их взаимосвязь.

# Как построить диаграмму рассеяния
# Как и все знакомые вам графики, диаграмма рассеяния строится
# с помощью библиотеки Seaborn. Методу scatterplot()
# из этой библиотеки передают два списка одинаковой длины.
# Значения из этих списков соответствуют координатам точек
# по оси X и Y.
# Для начала построим самую простую диаграмму рассеяния —
# с одной точкой.

import seaborn
seaborn.scatterplot(x=[0], y=[10])

# Единственная точка на графике расположена на пересечении
# двух заданных координат: 0 по оси X и 10 по оси Y.
# Изменив списки координат, добавим на график ещё одну точку.
import seaborn
seaborn.scatterplot(x=[0, 0.5], y=[10, 20])   # в списках уже по два элемента

import matplotlib.pyplot as plt
plt.show()

# Когда точек много, их координаты удобнее хранить в отдельных
# переменных. И уже эти переменные передавать методу scatterplot().
import seaborn

# создаём список координат по оси X
x_coordinates = [-0.4, 0.4, -0.2, -0.7, -0.8, -1.8, 0.5, 0.9, -0.1, 0.3]

# и список координат по оси Y
y_coordinates = [0.9, 0.7, 1.3, -0.2, -1.3, 0.8, 0.3, 0.4, -0.9, 0.6]

# вызываем метод scatterplot и передаём ему переменные
seaborn.scatterplot(x=x_coordinates, y=y_coordinates)

import matplotlib.pyplot as plt
plt.show()

# Управление цветом
# Иногда на графике нужно отразить какую-нибудь разницу между
# точками — добавить новый слой информации. Проще всего это
# сделать при помощи цвета. За цвет точек на диаграмме рассеяния
# отвечает дополнительный параметр метода scatterplot() — hue.

# В параметре hue указывают список той же длины, что и списки
# координат, — каждый элемент соответствует определённой точке
# на графике. Далее Seaborn самостоятельно подбирает оттенки
# в зависимости от содержания списка. Если это числа —
# разбивает их на диапазоны и каждому присваивает свой цвет.
# Аналогично раскрашиванию ячеек на тепловой карте.
# Например, если в качестве параметра hue передать scatterplot()
# список, в котором будут только нули и единицы, цветов на
# графике будет всего два.

import seaborn

x_coordinates = [-0.4, 0.4, -0.2, -0.7, -0.8, -1.8, 0.5, 0.9, -0.1, 0.3]
y_coordinates = [0.9, 0.7, 1.3, -0.2, -1.3, 0.8, 0.3, 0.4, -0.9, 0.6]

# создаём список из десяти элементов
dots_features = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1]

seaborn.scatterplot(x=x_coordinates, y=y_coordinates, hue=dots_features)

import matplotlib.pyplot as plt
plt.show()

# Точки на графике окрасились в контрастные цвета, а рядом появилась легенда.
# Когда значения в списке hue более «разноплановые», цветов становится больше.
# Легенда при этом отражает не все, а только крайние значения диапазонов.

import seaborn

# список координат по оси X
x_coordinates = [-0.4, 0.4, -0.2, -0.7, -0.8, -1.8, 0.5, 0.9, -0.1, 0.3]
# список координат по оси Y
y_coordinates = [0.9, 0.7, 1.3, -0.2, -1.3, 0.8, 0.3, 0.4, -0.9, 0.6]

# список значений для окрашивания точек
dots_features = [0.5, -0.2, 1.5, -1.4, 0.9, -0.8, 0.6, -1.8, -0.6, 1.1]

seaborn.scatterplot(x=x_coordinates, y=y_coordinates, hue=dots_features)
import matplotlib.pyplot as plt
plt.show()