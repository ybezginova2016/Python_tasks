# Определитель в коде
# Чтобы вычислять определитель на языке Python, нужна функция
# np.linalg.det(a). Здесь a — исходная матрица. Обычно результат
# сохраняют в переменную det для улучшения читаемости кода.

import numpy as np

a = np.array([
    [14, -8],
    [2, 3]
])
det = np.linalg.det(a)
print("Матрица:")
print(a)
print("Определитель:")
print(det)

# Почему определитель дробный?

# Дело в том, что Python вычисляет определители матриц иначе.
# Если попросить посчитать \det(A),det(A), то Python сначала построит
# разложение матрицы AA в произведение двух более простых:
# A = LU.A=LU. И уже потом посчитает определитель по формуле
# det(A) = \det(L) \cdot \det(U).det(A)=det(L)⋅det(U).

# При построении матриц LL и UU Python выполняет операции
# деления, из-за чего LL и UU уже не будут целочисленными.
# Поэтому и \det(A)det(A) с большой вероятностью из-за
# погрешностей округления будет дробным числом.
print()
b = np.array([
             [-0.8, 24],
                [1, 3.7]
             ])
det = np.linalg.det(b)
print("Матрица:")
print(b)
print("Определитель:")
print(det)
print()

import numpy as np

c = np.array(
[[2.9, 0.07],
[3.15, 9]])

det_c = np.linalg.det(c)
print("Матрица:")
print(c)
print("Определитель:")
print(det_c)