import numpy as np

# Исходные векторы.
A = np.array([1, 2])
B = np.array([3, 4])

print("Исходные векторы:")
print(f"A: {A}")
print()
print(f"B: {B}")
print()

# Склейка по вертикали
print(np.stack([A, B], axis=0))
print()
print(np.stack([B, A], axis=0))
print()
print(np.stack([A, B], axis=1))
print()
print(np.stack([B, A], axis=1))
# Давайте автоматизируем создание матрицы X.X. Для этого нам
# понадобится функция np.stack, которая «склеивает» NumPy-массивы.
# Ей нужно подать два аргумента:

# 1) arrays — список массивов для склеивания. Например, можно
# перечислить массивы в квадратных скобках: [A, B, C].
# 2) axis — число, обозначающее направление склейки. 0 — склейка
# по вертикали, 1 — по горизонтали.

##### EXERCISE 1 #####

# Найдите параметры линейной регрессии по данным Макса. Сохраните
# вектор найденных весов в переменной w.

# Чтобы создать массив единиц, воспользуйтесь функцией np.ones.
# На вход ей подают размер массива, на выходе получают массив
# заданного размера, состоящий из единиц.
import numpy as np
import matplotlib.pyplot as plt

# Часы после начала смены.
hours = np.array([0., 1., 2., 3., 4., 5., 6., 7., 8., 0., 1., 2., 3., 4., 5., 6., 7.,
       8., 0., 1., 2., 3., 4., 5., 6., 7., 8., 0., 1., 2., 3., 4., 5., 6.,
       7., 8., 0., 1., 2., 3., 4., 5., 6., 7., 8., 0., 1., 2., 3., 4.])

# Оценка настроения.
mood = np.array([ 9. ,  7.5,  7.5, 10. ,  5.5,  7.5,  8.5,  5. ,  5.5,  5. ,  7. ,
        8.5,  8.5,  5. ,  6.5,  8.5,  3.5,  3. ,  5.5,  6. ,  7. ,  7. ,
        5.5,  6. ,  8.5,  7. ,  6. ,  6. ,  8. , 10. ,  7. ,  6. ,  4.5,
        6.5,  4.5,  6.5,  7. ,  8.5,  6. ,  6.5,  9.5,  8. ,  8. ,  5. ,
        3.5,  6. ,  9. ,  6.5,  5.5,  8. ])

X = np.stack([hours, np.ones(len(hours))], axis=1)
y = mood

# Рассчитываем коэффициенты прямой по формуле.
# w - вектор коэффициентов [k, m].
w = np.linalg.inv(X.T @ X) @ X.T @ y
print(w)

# Код для построения графика, можно не менять.
plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], mood, s=100)

x_min, x_max = hours.min() - 1, hours.max() + 1
plt.xlim(x_min, x_max)

y_min, y_max = 0, 11
plt.ylim(y_min, y_max)

y_min_line = x_min * w[0] + w[1]
y_max_line = x_max * w[0] + w[1]

plt.plot(
    [x_min, x_max],
    [y_min_line, y_max_line],
    linewidth=3,
    c="C1",
)

plt.xlabel("$x$", fontsize=15)
plt.ylabel("$y$", fontsize=15, rotation=0, labelpad=15)

plt.grid()